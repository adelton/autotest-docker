[docker_cli/kill_parallel_stress]
docker_timeout = 60
#: how long to wait before using the container
wait_start = 3
#: modifies the ``docker run`` options
run_options_csv = --attach=stdout
subsubtests = parallel_stress,parallel_stress_ttyoff,run_sigproxy_stress_parallel,run_sigproxy_stress_parallel_ttyoff
#: which signals should not be used (uncatchable signals)
skip_signals = 9 17 19 27
#: checking output produced by signal
check_stdout = Received %%s, ignoring...
#: range of used signals
kill_signals = 1 31
#: map signal numbers to names (RANDOM,true,false)
kill_map_signals = false
#: maximal acceptable delay caused by stress command
stress_cmd_timeout = 5
#: modifies the container command
exec_cmd = 'for NUM in `seq 1 64`; do trap "echo Received $NUM, ignoring..." $NUM; done; while :; do sleep 0.1; done'
#: used kill command (``false`` -> ``docker kill $name``;
#: `true`` -> ``os.kill $docker_cmd.pid``
kill_sigproxy =
#: execute detacched container and attach it in separate process
run_container_attached = false
#: test duration
test_length = 60

[docker_cli/kill_parallel_stress/parallel_stress]

[docker_cli/kill_parallel_stress/parallel_stress_ttyoff]

[docker_cli/kill_parallel_stress/run_sigproxy_stress_parallel]
# --sig-proxy + os.kill() test
kill_sigproxy = true
run_container_attached = true
run_options_csv = --detach=true,--tty=false,--sig-proxy=true
attach_options_csv = --sig-proxy=true

[docker_cli/kill_parallel_stress/run_sigproxy_stress_parallel_ttyoff]
kill_sigproxy = true
run_container_attached = true
run_options_csv = --detach=true,--sig-proxy=true
attach_options_csv = --sig-proxy=true
