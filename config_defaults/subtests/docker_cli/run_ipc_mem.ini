[docker_cli/run_ipc_mem]
#: Modify the cmd options
run_options_csv = -i
#: Number of ping-pong iterations
no_iterations = 128
auto_subsubtests = host_hcont1,hcont1_host,cont1_c1cont2,hcont1_hcont2,host_cont1,cont1_cont2,hcont1_cont2,cont1_hcont2,host_hconts,host_hcont1_c1cont2,multi_conts_deep
subsubtests = %(auto_subsubtests)s,host_w_hcont1_c1cont2,host_hcont1_w_c1cont2,host_hcont1_w_hcont2,cont1_w_c1cont2_c1cont3,cont1_c1cont2_w_c2cont3

#: Setup string (**ONLY: auto_ipc_base** inherited tests); 
#: Start workers according to setup. They are chained ``(A->B->C->...->A)``; 
#: ``obj = host | cont$x | $ref_cont$x``;  
#: ``host = host worker, $ref = --ipc host | container:$name``
setup =
#: How long to wait for start of the ``name`` worker
name_start =
#: How long to wait for finish of the ``name`` worker
name_stop =
#: What error string is expected (None=>None;True=>exit_code!=0;string=>string
name_err =

# Simple good
[docker_cli/run_ipc_mem/host_hcont1]
setup = host host_cont1
cont1_stop = 120

[docker_cli/run_ipc_mem/hcont1_host]
setup = host_cont1 host
host_stop = 120

[docker_cli/run_ipc_mem/cont1_c1cont2]
setup = cont1 cont1_cont2
cont2_stop = 120

[docker_cli/run_ipc_mem/hcont1_hcont2]
setup = host_cont1 host_cont2
cont2_stop = 120

# Simple bad
[docker_cli/run_ipc_mem/host_cont1]
setup = host cont1
host_start = 15
host_err = Silent 0th iteration
cont1_start = 15
cont1_err = Silent 0th iteration

[docker_cli/run_ipc_mem/cont1_cont2]
setup = cont1 cont2
cont1_start = 15
cont1_err = Silent 0th iteration
cont2_start = 15
cont2_err = Silent 0th iteration

[docker_cli/run_ipc_mem/hcont1_cont2]
setup = cont1 cont2
cont1_start = 15
cont1_err = Silent 0th iteration
cont2_start = 15
cont2_err = Silent 0th iteration

[docker_cli/run_ipc_mem/cont1_hcont2]
setup = cont1 cont2
cont1_start = 15
cont1_err = Silent 0th iteration
cont2_start = 15
cont2_err = Silent 0th iteration

# Advanced good
[docker_cli/run_ipc_mem/host_hconts]
setup = host host_cont1 host_cont2 host_cont3 host_cont4
cont4_stop = 120

[docker_cli/run_ipc_mem/host_hcont1_c1cont2]
## BUG - selinux
setup = host host_cont1 cont1_cont2
cont2_stop = 120

[docker_cli/run_ipc_mem/cont1_c1cont2_c2cont3]
setup = cont1 cont1_cont2 cont2_cont3
cont3_stop = 120

[docker_cli/run_ipc_mem/multi_conts_deep]
setup = cont1 cont1_cont2 cont2_cont3 cont2_cont4 cont1_cont5 cont5_cont6
cont3_stop = 120

# Multi namespaces good
# FIXME: This implementation makes no sense. We need to test wether the SHMID
# is allocated inside the second group (which shouldn't) and wether the second
# one can influence the first one.
# [docker_cli/run_ipc_mem/cont1_c1cont2_x_cont3_c3cont4]
# setup = cont1 cont1_cont2|cont3 cont3_cont4
# setup = cont1 cont1_cont2|cont1_cont3 cont3_cont4
# cont4_stop = 120
#
# [docker_cli/run_ipc_mem/host_hcont1_x_cont2_c2cont3]
# setup = host host_cont1|cont2 cont2_cont3
# cont3_stop = 120

# TODO: Test that --ipc on not-started/finished container fails
