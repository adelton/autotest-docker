[docker_cli/build]
subsubtests = local_path,https_file,git_path,rm_false,cache,
              bad,bad_quiet,bad_force_rm

#: ``docker build`` options as CSV list
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=false

#: Customize to match locally available resources
#: Paths to docker build contexts used by tests (built during setup)
source_dirs = full,part,bad

#: A ``/`` + a relative path from test setup directory, to subdirectory
#: containing a ``Dockerfile`` (and it's context). Alternatively, a
#: ``http``/``ftp``/``git`` url accepted by the ``docker build`` command
#: (with out any ``/`` prefix).
dockerfile_dir_path =

#: Set to ``yes`` when ``dockerfile_dir_path`` is a writeable file, and test
#: should substitute default test repo into FROM statement.  Set to
#: ``no`` otherwise, or when ``dockerfile_dir_path`` is a remote
#: read-only resource.
use_config_repo = yes

#: Comma-separated post-process checks to call, in order, with optional
#: string parameter enclosed in ``('``, ``')``.  Check commands are:{n}
#: {n}
#: {t}  * ``positive()`` - Exit code must be zero, no Go panics or
#: {t}    usage messages{n}
#: {t}  * ``negative()`` - Exit code must be non-zero, no Go panics or
#: {t}    usage messages{n}
#: {t}  * ``rx_out('<regex>')`` - Must match stdout to ``<regex>`` on one
#: {t}    or more lines{n}
#: {t}  * ``!rx_out('<regex>')`` - Must not match stdout to ``<regex>`` on
#: {t}    any line{n}
#: {t}  * ``rx_err('<regex>')`` - Must match stderr to ``<regex>`` on one
#: {t}    or more lines{n}
#: {t}  * ``!rx_err('<regex>')`` - Must not match stderr to ``<regex>`` on any
#: {t}    line{n}
#: {t}  * ``img_count('<number>')`` - Must be ``<number>`` additional images
#: {t}    after build{n}
#: {t}  * ``cnt_count('<number>')`` - Must be ``<number>`` additional containers
#: {t}    after build{n}
#: {t}  * ``last_cnt()`` - Last created container must exist after build{n}
#: {t}  * ``img_exst()`` - Generated/Unique image name must exist{n}
#: {t}  * ``!img_exst()`` - Generated/Unique image name must not exist{n}
#: {t}  * ``intr_exst()`` - All intermediate created images must exist{n}
#: {t}  * ``!intr_exst()`` - No intermediate created images must exist{n}
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   rx_out('Sending build context to Docker daemon'),
                   cnt_count('0'),
                   img_count('1'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/local_path]
dockerfile_dir_path = /full

[docker_cli/build/https_file]
__example__ = dockerfile_dir_path, postproc_cmd_csv
use_config_repo = no
dockerfile_dir_path = https://raw.githubusercontent.com/autotest/autotest-docker/master/Dockerfile
postproc_cmd_csv = positive(),
                   rx_out('Removing intermediate container'),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   !rx_err('Sending build context to Docker daemon'),
                   cnt_count('0'),
                   img_count('4'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/git_path]
__example__ = dockerfile_dir_path, postproc_cmd_csv
use_config_repo = no
dockerfile_dir_path = github.com/jpetazzo/docker-busybox.git
postproc_cmd_csv = positive(),
                   rx_out('Removing intermediate container'),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   rx_out('Sending build context to Docker daemon'),
                   cnt_count('0'),
                   img_count('1'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/bad]
dockerfile_dir_path = /bad
postproc_cmd_csv = negative(),
                   rx_out('^Schazam!$'),
                   !rx_out('^foobar$'),
                   rx_out('Sending build context to Docker daemon'),
                   !rx_err('Successfully built')
                   rx_err('returned a non-zero code'),
                   cnt_count('1'),
                   img_count('1')
                   last_cnt(),
                   !img_exst()

[docker_cli/build/bad_quiet]
dockerfile_dir_path = /bad
docker_build_options = --rm=true,--no-cache=true,--quiet=true,--force-rm=false
postproc_cmd_csv = negative(),
                   !rx_out('^Schazam!$'),
                   !rx_out('^foobar$'),
                   rx_out('Sending build context to Docker daemon'),
                   !rx_err('Successfully built')
                   rx_err('returned a non-zero code'),
                   cnt_count('1'),
                   img_count('1')
                   last_cnt(),
                   !img_exst()

[docker_cli/build/bad_force_rm]
dockerfile_dir_path = /bad
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=true
postproc_cmd_csv = negative(),
                   rx_out('^Schazam!$'),
                   !rx_out('^foobar$'),
                   rx_out('Sending build context to Docker daemon'),
                   !rx_err('Successfully built')
                   rx_err('returned a non-zero code'),
                   cnt_count('0'),
                   img_count('1')
                   !img_exst()

[docker_cli/build/rm_false]
dockerfile_dir_path = /full
docker_build_options = --rm=false,--no-cache=true,--quiet=false,--force-rm=false
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   rx_out('Sending build context to Docker daemon'),
                   cnt_count('5'),
                   img_count('1'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/cache]
# first build
dockerfile_dir_path = /part
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=false
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   rx_out('Sending build context to Docker daemon'),
                   !rx_out('Using cache')
                   rx_out('^Schazam!$'),
                   cnt_count('0'),
                   img_count('2'),
                   img_exst(),
                   intr_exst()
#: Second build uses this path to check caching of first build
dockerfile_dir_path2 = /full
#: Second build Options CSV
docker_build_options2 = --rm=true,--no-cache=false,--quiet=false,--force-rm=false
#: Second build ``postproc_cmd_csv``.
postproc_cmd_csv2 = positive(),
                    rx_out('Using cache')
                    rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                    rx_out('Sending build context to Docker daemon'),
                    !rx_out('^Schazam!$'),
                    cnt_count('0'),
                    img_count('2'),
                    img_exst(),
                    intr_exst()
