[docker_cli/run_volumes]
subsubtests = volumes_rw, volumes_one_source
#: These must be setup prior to testing
__example__ = host_paths, cntr_paths
#: Command-line string, required to succeed prior to testing (if any).
#: Will only be run once, before any sub-subtests execute.
#: e.g. setsebool virt_sandbox_use_nfs on
pretest_cmd =
#: CSV list of host paths to check, assumes filesystem is already mounted
#: for testing NFS, SMB, etc.  **If using SELinux, don't forget to
#: 'setsebool virt_sandbox_use_<type> on' where <type> is nfs, samba, etc.**
host_paths =
#: CSV list of destination paths in container corresponding to host_paths above
#: **(must exactly match the number of host_paths)**
cntr_paths =
#: CSV options to docker command(s), values will be substituted for
#: ``%%(cidfile)s``, ``%%(host_path)s``, ``%%(cntr_path)s``.  Random
#: filenames will be produced and set by ``%%(read_fn)s`` and ``%%(write_fn)s``
#: for use in the test.
run_template = --cidfile="%%(cidfile)s",--volume="%%(host_path)s:%%(cntr_path)s"
#: Command string to execute inside container, values will be substituted
#: as in ``run_template`` (above).
cmd_template = /bin/bash -c 'cd "%%(cntr_path)s" && cat "%%(read_fn)s" | /usr/bin/md5sum >> "%%(write_fn)s"'

[docker_cli/run_volumes/volumes_one_source]
#: the number of containers to run concurrently.
num_containers = 5
#: the timeout for each container's IO command
cmd_timeout = 30
#: If non-empty, set this context type on host paths
#: e.g. svirt_sandbox_file_t
selinux_context = svirt_sandbox_file_t
#: where to mount the volume inside the container
cntr_path = /run-n-volume
#: the command each container should run.  This
#: should be an IO command that writes to a file at ``%%(write_path)s`` which will
#: be inside the mounted volume.  This command should also take time to
#: allow for taking place while the other containers are also writing IO.
exec_command = /bin/bash -c 'for i in $(seq 5); do echo "%%(name)s - $i - $(date)" >> "%%(write_path)s"; sleep 1; done && /usr/bin/md5sum "%%(write_path)s"'

[docker_cli/run_volumes/file_volume]
# Note: Test disabled until future version of systemd which provides --machine-id
# option in 'systemctl' command.
host_paths = /var/log/journal
cntr_paths = /root/journal
run_template = -it,--cidfile="%%(cidfile)s",--volume="%%(host_path)s:%%(cntr_path)s",
               --privileged
cmd_template = /usr/bin/journalctl --header --directory=%%(cntr_path)s
#: Regular expression that must match stdout on successful execution
regex = '^State: ONLINE$'
